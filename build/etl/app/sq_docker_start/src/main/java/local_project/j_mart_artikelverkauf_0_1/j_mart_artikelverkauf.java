// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.j_mart_artikelverkauf_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: j_mart_artikelverkauf Purpose: Beladung Mart-Tabelle<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class j_mart_artikelverkauf implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(daisie_db_server != null){
				
					this.setProperty("daisie_db_server", daisie_db_server.toString());
				
			}
			
			if(daisie_db_database != null){
				
					this.setProperty("daisie_db_database", daisie_db_database.toString());
				
			}
			
			if(daisie_db_password != null){
				
					this.setProperty("daisie_db_password", daisie_db_password.toString());
				
			}
			
			if(daisie_db_additionalParams != null){
				
					this.setProperty("daisie_db_additionalParams", daisie_db_additionalParams.toString());
				
			}
			
			if(daisie_db_username != null){
				
					this.setProperty("daisie_db_username", daisie_db_username.toString());
				
			}
			
			if(daisie_db_port != null){
				
					this.setProperty("daisie_db_port", daisie_db_port.toString());
				
			}
			
			if(daisie_db_schema != null){
				
					this.setProperty("daisie_db_schema", daisie_db_schema.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String daisie_db_server;
public String getDaisie_db_server(){
	return this.daisie_db_server;
}
public String daisie_db_database;
public String getDaisie_db_database(){
	return this.daisie_db_database;
}
public java.lang.String daisie_db_password;
public java.lang.String getDaisie_db_password(){
	return this.daisie_db_password;
}
public String daisie_db_additionalParams;
public String getDaisie_db_additionalParams(){
	return this.daisie_db_additionalParams;
}
public String daisie_db_username;
public String getDaisie_db_username(){
	return this.daisie_db_username;
}
public String daisie_db_port;
public String getDaisie_db_port(){
	return this.daisie_db_port;
}
public String daisie_db_schema;
public String getDaisie_db_schema(){
	return this.daisie_db_schema;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "j_mart_artikelverkauf";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				j_mart_artikelverkauf.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(j_mart_artikelverkauf.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_von_artikel_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_von_land_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_von_zeit_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = context.daisie_db_additionalParams;
            String url_tDBConnection_1 = "jdbc:postgresql://"+context.daisie_db_server+":"+context.daisie_db_port+"/"+context.daisie_db_database;
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = context.daisie_db_username;
	
	
		
	final String decryptedPassword_tDBConnection_1 = context.daisie_db_password; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
globalMap.put("tDBConnection_1_ERROR_MESSAGE",e_tDBConnection_1.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_1",context.daisie_db_schema);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";

	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	



	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
        conn_tDBClose_1.close();
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public static class zu_aktualisiere_mart_tabelleStruct implements routines.system.IPersistableRow<zu_aktualisiere_mart_tabelleStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int dim_artikel_id;

				public int getDim_artikel_id () {
					return this.dim_artikel_id;
				}
				
			    public int dim_land_id;

				public int getDim_land_id () {
					return this.dim_land_id;
				}
				
			    public int dim_zeit_id;

				public int getDim_zeit_id () {
					return this.dim_zeit_id;
				}
				
			    public int fakt_anzahl_artikel;

				public int getFakt_anzahl_artikel () {
					return this.fakt_anzahl_artikel;
				}
				
			    public double fakt_preis_artikel;

				public double getFakt_preis_artikel () {
					return this.fakt_preis_artikel;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.dim_artikel_id;
						
							result = prime * result + (int) this.dim_land_id;
						
							result = prime * result + (int) this.dim_zeit_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final zu_aktualisiere_mart_tabelleStruct other = (zu_aktualisiere_mart_tabelleStruct) obj;
		
						if (this.dim_artikel_id != other.dim_artikel_id)
							return false;
					
						if (this.dim_land_id != other.dim_land_id)
							return false;
					
						if (this.dim_zeit_id != other.dim_zeit_id)
							return false;
					

		return true;
    }

	public void copyDataTo(zu_aktualisiere_mart_tabelleStruct other) {

		other.dim_artikel_id = this.dim_artikel_id;
	            other.dim_land_id = this.dim_land_id;
	            other.dim_zeit_id = this.dim_zeit_id;
	            other.fakt_anzahl_artikel = this.fakt_anzahl_artikel;
	            other.fakt_preis_artikel = this.fakt_preis_artikel;
	            
	}

	public void copyKeysDataTo(zu_aktualisiere_mart_tabelleStruct other) {

		other.dim_artikel_id = this.dim_artikel_id;
	            	other.dim_land_id = this.dim_land_id;
	            	other.dim_zeit_id = this.dim_zeit_id;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf) {

        	try {

        		int length = 0;
		
			        this.dim_artikel_id = dis.readInt();
					
			        this.dim_land_id = dis.readInt();
					
			        this.dim_zeit_id = dis.readInt();
					
			        this.fakt_anzahl_artikel = dis.readInt();
					
			        this.fakt_preis_artikel = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf) {

        	try {

        		int length = 0;
		
			        this.dim_artikel_id = dis.readInt();
					
			        this.dim_land_id = dis.readInt();
					
			        this.dim_zeit_id = dis.readInt();
					
			        this.fakt_anzahl_artikel = dis.readInt();
					
			        this.fakt_preis_artikel = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.dim_artikel_id);
					
					// int
				
		            	dos.writeInt(this.dim_land_id);
					
					// int
				
		            	dos.writeInt(this.dim_zeit_id);
					
					// int
				
		            	dos.writeInt(this.fakt_anzahl_artikel);
					
					// double
				
		            	dos.writeDouble(this.fakt_preis_artikel);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.dim_artikel_id);
					
					// int
				
		            	dos.writeInt(this.dim_land_id);
					
					// int
				
		            	dos.writeInt(this.dim_zeit_id);
					
					// int
				
		            	dos.writeInt(this.fakt_anzahl_artikel);
					
					// double
				
		            	dos.writeDouble(this.fakt_preis_artikel);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dim_artikel_id="+String.valueOf(dim_artikel_id));
		sb.append(",dim_land_id="+String.valueOf(dim_land_id));
		sb.append(",dim_zeit_id="+String.valueOf(dim_zeit_id));
		sb.append(",fakt_anzahl_artikel="+String.valueOf(fakt_anzahl_artikel));
		sb.append(",fakt_preis_artikel="+String.valueOf(fakt_preis_artikel));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(zu_aktualisiere_mart_tabelleStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.dim_artikel_id, other.dim_artikel_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dim_land_id, other.dim_land_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.dim_zeit_id, other.dim_zeit_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class zu_lkp_dim_tabellenStruct implements routines.system.IPersistableRow<zu_lkp_dim_tabellenStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[0];

	
			    public String artikelbeschreibung;

				public String getArtikelbeschreibung () {
					return this.artikelbeschreibung;
				}
				
			    public String name_land;

				public String getName_land () {
					return this.name_land;
				}
				
			    public java.util.Date rechnungsdatum;

				public java.util.Date getRechnungsdatum () {
					return this.rechnungsdatum;
				}
				
			    public Integer fakt_anzahl_artikel;

				public Integer getFakt_anzahl_artikel () {
					return this.fakt_anzahl_artikel;
				}
				
			    public Double fakt_preis_artikel;

				public Double getFakt_preis_artikel () {
					return this.fakt_preis_artikel;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf.length == 0) {
   					commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf.length == 0) {
   					commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf) {

        	try {

        		int length = 0;
		
					this.artikelbeschreibung = readString(dis);
					
					this.name_land = readString(dis);
					
					this.rechnungsdatum = readDate(dis);
					
						this.fakt_anzahl_artikel = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.fakt_preis_artikel = null;
           				} else {
           			    	this.fakt_preis_artikel = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf) {

        	try {

        		int length = 0;
		
					this.artikelbeschreibung = readString(dis);
					
					this.name_land = readString(dis);
					
					this.rechnungsdatum = readDate(dis);
					
						this.fakt_anzahl_artikel = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.fakt_preis_artikel = null;
           				} else {
           			    	this.fakt_preis_artikel = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.artikelbeschreibung,dos);
					
					// String
				
						writeString(this.name_land,dos);
					
					// java.util.Date
				
						writeDate(this.rechnungsdatum,dos);
					
					// Integer
				
						writeInteger(this.fakt_anzahl_artikel,dos);
					
					// Double
				
						if(this.fakt_preis_artikel == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.fakt_preis_artikel);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.artikelbeschreibung,dos);
					
					// String
				
						writeString(this.name_land,dos);
					
					// java.util.Date
				
						writeDate(this.rechnungsdatum,dos);
					
					// Integer
				
						writeInteger(this.fakt_anzahl_artikel,dos);
					
					// Double
				
						if(this.fakt_preis_artikel == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.fakt_preis_artikel);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("artikelbeschreibung="+artikelbeschreibung);
		sb.append(",name_land="+name_land);
		sb.append(",rechnungsdatum="+String.valueOf(rechnungsdatum));
		sb.append(",fakt_anzahl_artikel="+String.valueOf(fakt_anzahl_artikel));
		sb.append(",fakt_preis_artikel="+String.valueOf(fakt_preis_artikel));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(zu_lkp_dim_tabellenStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[0];

	
			    public String artikelbeschreibung;

				public String getArtikelbeschreibung () {
					return this.artikelbeschreibung;
				}
				
			    public String name_land;

				public String getName_land () {
					return this.name_land;
				}
				
			    public java.util.Date rechnungsdatum;

				public java.util.Date getRechnungsdatum () {
					return this.rechnungsdatum;
				}
				
			    public Integer fakt_anzahl_artikel;

				public Integer getFakt_anzahl_artikel () {
					return this.fakt_anzahl_artikel;
				}
				
			    public Double fakt_preis_artikel;

				public Double getFakt_preis_artikel () {
					return this.fakt_preis_artikel;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf.length == 0) {
   					commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf.length == 0) {
   					commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf) {

        	try {

        		int length = 0;
		
					this.artikelbeschreibung = readString(dis);
					
					this.name_land = readString(dis);
					
					this.rechnungsdatum = readDate(dis);
					
						this.fakt_anzahl_artikel = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.fakt_preis_artikel = null;
           				} else {
           			    	this.fakt_preis_artikel = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf) {

        	try {

        		int length = 0;
		
					this.artikelbeschreibung = readString(dis);
					
					this.name_land = readString(dis);
					
					this.rechnungsdatum = readDate(dis);
					
						this.fakt_anzahl_artikel = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.fakt_preis_artikel = null;
           				} else {
           			    	this.fakt_preis_artikel = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.artikelbeschreibung,dos);
					
					// String
				
						writeString(this.name_land,dos);
					
					// java.util.Date
				
						writeDate(this.rechnungsdatum,dos);
					
					// Integer
				
						writeInteger(this.fakt_anzahl_artikel,dos);
					
					// Double
				
						if(this.fakt_preis_artikel == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.fakt_preis_artikel);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.artikelbeschreibung,dos);
					
					// String
				
						writeString(this.name_land,dos);
					
					// java.util.Date
				
						writeDate(this.rechnungsdatum,dos);
					
					// Integer
				
						writeInteger(this.fakt_anzahl_artikel,dos);
					
					// Double
				
						if(this.fakt_preis_artikel == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.fakt_preis_artikel);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("artikelbeschreibung="+artikelbeschreibung);
		sb.append(",name_land="+name_land);
		sb.append(",rechnungsdatum="+String.valueOf(rechnungsdatum));
		sb.append(",fakt_anzahl_artikel="+String.valueOf(fakt_anzahl_artikel));
		sb.append(",fakt_preis_artikel="+String.valueOf(fakt_preis_artikel));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);
		tDBInput_3Process(globalMap);
		tDBInput_4Process(globalMap);

		zu_lkp_dim_tabellenStruct zu_lkp_dim_tabellen = new zu_lkp_dim_tabellenStruct();
zu_aktualisiere_mart_tabelleStruct zu_aktualisiere_mart_tabelle = new zu_aktualisiere_mart_tabelleStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"zu_aktualisiere_mart_tabelle");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("ta_mart_artikelverkauf");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("ta_mart_artikelverkauf");
}

        int updateKeyCount_tDBOutput_1 = 3;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_1 == 5 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_1=0;
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"fakt_anzahl_artikel\" = ?,\"fakt_preis_artikel\" = ? WHERE \"dim_artikel_id\" = ? AND \"dim_land_id\" = ? AND \"dim_zeit_id\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"dim_artikel_id\",\"dim_land_id\",\"dim_zeit_id\",\"fakt_anzahl_artikel\",\"fakt_preis_artikel\") VALUES (?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"zu_lkp_dim_tabellen");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<von_artikelStruct> tHash_Lookup_von_artikel = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<von_artikelStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<von_artikelStruct>) 
					globalMap.get( "tHash_Lookup_von_artikel" ))
					;					
					
	

von_artikelStruct von_artikelHashKey = new von_artikelStruct();
von_artikelStruct von_artikelDefault = new von_artikelStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<von_landStruct> tHash_Lookup_von_land = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<von_landStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<von_landStruct>) 
					globalMap.get( "tHash_Lookup_von_land" ))
					;					
					
	

von_landStruct von_landHashKey = new von_landStruct();
von_landStruct von_landDefault = new von_landStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<von_zeitStruct> tHash_Lookup_von_zeit = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<von_zeitStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<von_zeitStruct>) 
					globalMap.get( "tHash_Lookup_von_zeit" ))
					;					
					
	

von_zeitStruct von_zeitHashKey = new von_zeitStruct();
von_zeitStruct von_zeitDefault = new von_zeitStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
zu_aktualisiere_mart_tabelleStruct zu_aktualisiere_mart_tabelle_tmp = new zu_aktualisiere_mart_tabelleStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "\nselect\n	c.artikelbeschreibung,\n	e.name_land,\n	b.rechnungsdatum,\n	sum(menge) as fakt_anzahl_artikel, \n	sum((menge"
+" * c.artikelpreis)) as fakt_preis_artikel \nfrom\n	" + context.daisie_db_schema + ".ta_cor_rechnung_position a\ninner join\n	" + context.daisie_db_schema + ".ta_cor_rechnung b on a.rechnung_nr = b.rechnung_nr \ninner join\n	" + context.daisie_db_schema + ".ta_cor_artikel c on a.artikel_nr = c.artikel_nr \ninner join\n	" + context.daisie_db_schema + ".ta_cor_kunde d on b.kundennummer = d.kundennummer \ninner join\n	" + context.daisie_db_schema + ".ta_cor_land e on d.id_land = e.id  \ngroup by\n	c.artikelbeschreibung, \n	e.name_land,\n	b.rechnungsdatum \n";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								zu_lkp_dim_tabellen.artikelbeschreibung = null;
							} else {
	                         		
        	zu_lkp_dim_tabellen.artikelbeschreibung = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								zu_lkp_dim_tabellen.name_land = null;
							} else {
	                         		
        	zu_lkp_dim_tabellen.name_land = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								zu_lkp_dim_tabellen.rechnungsdatum = null;
							} else {
										
			zu_lkp_dim_tabellen.rechnungsdatum = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 3);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								zu_lkp_dim_tabellen.fakt_anzahl_artikel = null;
							} else {
		                          
            zu_lkp_dim_tabellen.fakt_anzahl_artikel = rs_tDBInput_1.getInt(4);
            if(rs_tDBInput_1.wasNull()){
                    zu_lkp_dim_tabellen.fakt_anzahl_artikel = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								zu_lkp_dim_tabellen.fakt_preis_artikel = null;
							} else {
	                         		
            zu_lkp_dim_tabellen.fakt_preis_artikel = rs_tDBInput_1.getDouble(5);
            if(rs_tDBInput_1.wasNull()){
                    zu_lkp_dim_tabellen.fakt_preis_artikel = null;
            }
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"zu_lkp_dim_tabellen"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "von_artikel" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopvon_artikel = false;
       		  	    	
       		  	    	
 							von_artikelStruct von_artikelObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    von_artikelHashKey.artikelbeschreibung = zu_lkp_dim_tabellen.artikelbeschreibung ;
                        		    		

								
		                        	von_artikelHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_von_artikel.lookup( von_artikelHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_von_artikel != null && tHash_Lookup_von_artikel.getCount(von_artikelHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'von_artikel' and it contains more one result from keys :  von_artikel.artikelbeschreibung = '" + von_artikelHashKey.artikelbeschreibung + "'");
								} // G 071
							

							von_artikelStruct von_artikel = null;
                    		  	 
							   
                    		  	 
	       		  	    	von_artikelStruct fromLookup_von_artikel = null;
							von_artikel = von_artikelDefault;
										 
							
								 
							
							
								if (tHash_Lookup_von_artikel !=null && tHash_Lookup_von_artikel.hasNext()) { // G 099
								
							
								
								fromLookup_von_artikel = tHash_Lookup_von_artikel.next();

							
							
								} // G 099
							
							

							if(fromLookup_von_artikel != null) {
								von_artikel = fromLookup_von_artikel;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "von_land" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopvon_land = false;
       		  	    	
       		  	    	
 							von_landStruct von_landObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    von_landHashKey.name_land = zu_lkp_dim_tabellen.name_land ;
                        		    		

								
		                        	von_landHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_von_land.lookup( von_landHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_von_land != null && tHash_Lookup_von_land.getCount(von_landHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'von_land' and it contains more one result from keys :  von_land.name_land = '" + von_landHashKey.name_land + "'");
								} // G 071
							

							von_landStruct von_land = null;
                    		  	 
							   
                    		  	 
	       		  	    	von_landStruct fromLookup_von_land = null;
							von_land = von_landDefault;
										 
							
								 
							
							
								if (tHash_Lookup_von_land !=null && tHash_Lookup_von_land.hasNext()) { // G 099
								
							
								
								fromLookup_von_land = tHash_Lookup_von_land.next();

							
							
								} // G 099
							
							

							if(fromLookup_von_land != null) {
								von_land = fromLookup_von_land;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "von_zeit" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopvon_zeit = false;
       		  	    	
       		  	    	
 							von_zeitStruct von_zeitObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    von_zeitHashKey.datum = zu_lkp_dim_tabellen.rechnungsdatum  == null ? null : new java.util.Date(zu_lkp_dim_tabellen.rechnungsdatum .getTime());
                        		    		

								
		                        	von_zeitHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_von_zeit.lookup( von_zeitHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_von_zeit != null && tHash_Lookup_von_zeit.getCount(von_zeitHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'von_zeit' and it contains more one result from keys :  von_zeit.datum = '" + von_zeitHashKey.datum + "'");
								} // G 071
							

							von_zeitStruct von_zeit = null;
                    		  	 
							   
                    		  	 
	       		  	    	von_zeitStruct fromLookup_von_zeit = null;
							von_zeit = von_zeitDefault;
										 
							
								 
							
							
								if (tHash_Lookup_von_zeit !=null && tHash_Lookup_von_zeit.hasNext()) { // G 099
								
							
								
								fromLookup_von_zeit = tHash_Lookup_von_zeit.next();

							
							
								} // G 099
							
							

							if(fromLookup_von_zeit != null) {
								von_zeit = fromLookup_von_zeit;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

zu_aktualisiere_mart_tabelle = null;


// # Output table : 'zu_aktualisiere_mart_tabelle'
zu_aktualisiere_mart_tabelle_tmp.dim_artikel_id = von_artikel.dim_artikel_id ;
zu_aktualisiere_mart_tabelle_tmp.dim_land_id = von_land.dim_land_id ;
zu_aktualisiere_mart_tabelle_tmp.dim_zeit_id = von_zeit.dim_zeit_id ;
zu_aktualisiere_mart_tabelle_tmp.fakt_anzahl_artikel = zu_lkp_dim_tabellen.fakt_anzahl_artikel;
zu_aktualisiere_mart_tabelle_tmp.fakt_preis_artikel = zu_lkp_dim_tabellen.fakt_preis_artikel;
zu_aktualisiere_mart_tabelle = zu_aktualisiere_mart_tabelle_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "zu_aktualisiere_mart_tabelle"
if(zu_aktualisiere_mart_tabelle != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"zu_aktualisiere_mart_tabelle"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
            int updateFlag_tDBOutput_1=0;
                    pstmtUpdate_tDBOutput_1.setInt(1, zu_aktualisiere_mart_tabelle.fakt_anzahl_artikel);

                    pstmtUpdate_tDBOutput_1.setDouble(2, zu_aktualisiere_mart_tabelle.fakt_preis_artikel);


                    pstmtUpdate_tDBOutput_1.setInt(3 + count_tDBOutput_1, zu_aktualisiere_mart_tabelle.dim_artikel_id);


                    pstmtUpdate_tDBOutput_1.setInt(4 + count_tDBOutput_1, zu_aktualisiere_mart_tabelle.dim_land_id);


                    pstmtUpdate_tDBOutput_1.setInt(5 + count_tDBOutput_1, zu_aktualisiere_mart_tabelle.dim_zeit_id);


            try {
				
                updateFlag_tDBOutput_1=pstmtUpdate_tDBOutput_1.executeUpdate();
                updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1+updateFlag_tDBOutput_1;
                rowsToCommitCount_tDBOutput_1 += updateFlag_tDBOutput_1;
				
            if(updateFlag_tDBOutput_1 == 0) {
            	
                        pstmtInsert_tDBOutput_1.setInt(1, zu_aktualisiere_mart_tabelle.dim_artikel_id);

                        pstmtInsert_tDBOutput_1.setInt(2, zu_aktualisiere_mart_tabelle.dim_land_id);

                        pstmtInsert_tDBOutput_1.setInt(3, zu_aktualisiere_mart_tabelle.dim_zeit_id);

                        pstmtInsert_tDBOutput_1.setInt(4, zu_aktualisiere_mart_tabelle.fakt_anzahl_artikel);

                        pstmtInsert_tDBOutput_1.setDouble(5, zu_aktualisiere_mart_tabelle.fakt_preis_artikel);

					
                    int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
                    insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    nb_line_tDBOutput_1++;
					
    	            }else{
    					nb_line_tDBOutput_1++;
    					
     					
    				}
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
					
                    whetherReject_tDBOutput_1 = true;
                        throw(e);
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "zu_aktualisiere_mart_tabelle"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_von_artikel != null) {
						tHash_Lookup_von_artikel.endGet();
					}
					globalMap.remove( "tHash_Lookup_von_artikel" );

					
					
				
					if(tHash_Lookup_von_land != null) {
						tHash_Lookup_von_land.endGet();
					}
					globalMap.remove( "tHash_Lookup_von_land" );

					
					
				
					if(tHash_Lookup_von_zeit != null) {
						tHash_Lookup_von_zeit.endGet();
					}
					globalMap.remove( "tHash_Lookup_von_zeit" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"zu_lkp_dim_tabellen");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"zu_aktualisiere_mart_tabelle");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_von_artikel"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_von_land"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_von_zeit"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class von_artikelStruct implements routines.system.IPersistableComparableLookupRow<von_artikelStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int dim_artikel_id;

				public int getDim_artikel_id () {
					return this.dim_artikel_id;
				}
				
			    public String artikelbeschreibung;

				public String getArtikelbeschreibung () {
					return this.artikelbeschreibung;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.artikelbeschreibung == null) ? 0 : this.artikelbeschreibung.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final von_artikelStruct other = (von_artikelStruct) obj;
		
						if (this.artikelbeschreibung == null) {
							if (other.artikelbeschreibung != null)
								return false;
						
						} else if (!this.artikelbeschreibung.equals(other.artikelbeschreibung))
						
							return false;
					

		return true;
    }

	public void copyDataTo(von_artikelStruct other) {

		other.dim_artikel_id = this.dim_artikel_id;
	            other.artikelbeschreibung = this.artikelbeschreibung;
	            
	}

	public void copyKeysDataTo(von_artikelStruct other) {

		other.artikelbeschreibung = this.artikelbeschreibung;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf.length == 0) {
   					commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf.length == 0) {
   					commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf) {

        	try {

        		int length = 0;
		
					this.artikelbeschreibung = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf) {

        	try {

        		int length = 0;
		
					this.artikelbeschreibung = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.artikelbeschreibung,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.artikelbeschreibung,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.dim_artikel_id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.dim_artikel_id = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.dim_artikel_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.dim_artikel_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dim_artikel_id="+String.valueOf(dim_artikel_id));
		sb.append(",artikelbeschreibung="+artikelbeschreibung);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(von_artikelStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.artikelbeschreibung, other.artikelbeschreibung);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		von_artikelStruct von_artikel = new von_artikelStruct();




	
	/**
	 * [tAdvancedHash_von_artikel begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_von_artikel", false);
		start_Hash.put("tAdvancedHash_von_artikel", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_von_artikel";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"von_artikel");
					}
				
		int tos_count_tAdvancedHash_von_artikel = 0;
		

			   		// connection name:von_artikel
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(von_artikel,von_artikel) | target node:tAdvancedHash_von_artikel - inputs:(von_artikel) outputs:()
			   		// linked node: tMap_1 - inputs:(zu_lkp_dim_tabellen,von_artikel,von_land,von_zeit) outputs:(zu_aktualisiere_mart_tabelle)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_von_artikel = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<von_artikelStruct> tHash_Lookup_von_artikel =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<von_artikelStruct>getLookup(matchingModeEnum_von_artikel);
	   						   
		   	   	   globalMap.put("tHash_Lookup_von_artikel", tHash_Lookup_von_artikel);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_von_artikel begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "\nselect\n	dim_artikel_id,\n	artikelbeschreibung\nfrom\n	" + context.daisie_db_schema + ".ta_dim_artikel\n";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								von_artikel.dim_artikel_id = 0;
							} else {
		                          
            von_artikel.dim_artikel_id = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								von_artikel.artikelbeschreibung = null;
							} else {
	                         		
        	von_artikel.artikelbeschreibung = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_von_artikel main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_von_artikel";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"von_artikel"
						
						);
					}
					


			   
			   

					von_artikelStruct von_artikel_HashRow = new von_artikelStruct();
		   	   	   
				
				von_artikel_HashRow.dim_artikel_id = von_artikel.dim_artikel_id;
				
				von_artikel_HashRow.artikelbeschreibung = von_artikel.artikelbeschreibung;
				
			tHash_Lookup_von_artikel.put(von_artikel_HashRow);
			
            




 


	tos_count_tAdvancedHash_von_artikel++;

/**
 * [tAdvancedHash_von_artikel main ] stop
 */
	
	/**
	 * [tAdvancedHash_von_artikel process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_von_artikel";

	

 



/**
 * [tAdvancedHash_von_artikel process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_von_artikel process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_von_artikel";

	

 



/**
 * [tAdvancedHash_von_artikel process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_von_artikel end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_von_artikel";

	

tHash_Lookup_von_artikel.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"von_artikel");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_von_artikel", true);
end_Hash.put("tAdvancedHash_von_artikel", System.currentTimeMillis());




/**
 * [tAdvancedHash_von_artikel end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_von_artikel finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_von_artikel";

	

 



/**
 * [tAdvancedHash_von_artikel finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class von_landStruct implements routines.system.IPersistableComparableLookupRow<von_landStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int dim_land_id;

				public int getDim_land_id () {
					return this.dim_land_id;
				}
				
			    public String name_land;

				public String getName_land () {
					return this.name_land;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.name_land == null) ? 0 : this.name_land.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final von_landStruct other = (von_landStruct) obj;
		
						if (this.name_land == null) {
							if (other.name_land != null)
								return false;
						
						} else if (!this.name_land.equals(other.name_land))
						
							return false;
					

		return true;
    }

	public void copyDataTo(von_landStruct other) {

		other.dim_land_id = this.dim_land_id;
	            other.name_land = this.name_land;
	            
	}

	public void copyKeysDataTo(von_landStruct other) {

		other.name_land = this.name_land;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf.length == 0) {
   					commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf.length == 0) {
   					commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf) {

        	try {

        		int length = 0;
		
					this.name_land = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf) {

        	try {

        		int length = 0;
		
					this.name_land = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name_land,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.name_land,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.dim_land_id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.dim_land_id = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.dim_land_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.dim_land_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dim_land_id="+String.valueOf(dim_land_id));
		sb.append(",name_land="+name_land);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(von_landStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.name_land, other.name_land);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		von_landStruct von_land = new von_landStruct();




	
	/**
	 * [tAdvancedHash_von_land begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_von_land", false);
		start_Hash.put("tAdvancedHash_von_land", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_von_land";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"von_land");
					}
				
		int tos_count_tAdvancedHash_von_land = 0;
		

			   		// connection name:von_land
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(von_land,von_land) | target node:tAdvancedHash_von_land - inputs:(von_land) outputs:()
			   		// linked node: tMap_1 - inputs:(zu_lkp_dim_tabellen,von_artikel,von_land,von_zeit) outputs:(zu_aktualisiere_mart_tabelle)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_von_land = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<von_landStruct> tHash_Lookup_von_land =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<von_landStruct>getLookup(matchingModeEnum_von_land);
	   						   
		   	   	   globalMap.put("tHash_Lookup_von_land", tHash_Lookup_von_land);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_von_land begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "\nselect\n	dim_land_id,\n	name_land\nfrom\n	" + context.daisie_db_schema + ".ta_dim_land\n";
		    

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								von_land.dim_land_id = 0;
							} else {
		                          
            von_land.dim_land_id = rs_tDBInput_3.getInt(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								von_land.name_land = null;
							} else {
	                         		
        	von_land.name_land = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_von_land main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_von_land";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"von_land"
						
						);
					}
					


			   
			   

					von_landStruct von_land_HashRow = new von_landStruct();
		   	   	   
				
				von_land_HashRow.dim_land_id = von_land.dim_land_id;
				
				von_land_HashRow.name_land = von_land.name_land;
				
			tHash_Lookup_von_land.put(von_land_HashRow);
			
            




 


	tos_count_tAdvancedHash_von_land++;

/**
 * [tAdvancedHash_von_land main ] stop
 */
	
	/**
	 * [tAdvancedHash_von_land process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_von_land";

	

 



/**
 * [tAdvancedHash_von_land process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_von_land process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_von_land";

	

 



/**
 * [tAdvancedHash_von_land process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_von_land end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_von_land";

	

tHash_Lookup_von_land.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"von_land");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_von_land", true);
end_Hash.put("tAdvancedHash_von_land", System.currentTimeMillis());




/**
 * [tAdvancedHash_von_land end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_von_land finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_von_land";

	

 



/**
 * [tAdvancedHash_von_land finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class von_zeitStruct implements routines.system.IPersistableComparableLookupRow<von_zeitStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_j_mart_artikelverkauf = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int dim_zeit_id;

				public int getDim_zeit_id () {
					return this.dim_zeit_id;
				}
				
			    public java.util.Date datum;

				public java.util.Date getDatum () {
					return this.datum;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.datum == null) ? 0 : this.datum.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final von_zeitStruct other = (von_zeitStruct) obj;
		
						if (this.datum == null) {
							if (other.datum != null)
								return false;
						
						} else if (!this.datum.equals(other.datum))
						
							return false;
					

		return true;
    }

	public void copyDataTo(von_zeitStruct other) {

		other.dim_zeit_id = this.dim_zeit_id;
	            other.datum = this.datum;
	            
	}

	public void copyKeysDataTo(von_zeitStruct other) {

		other.datum = this.datum;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf) {

        	try {

        		int length = 0;
		
					this.datum = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_j_mart_artikelverkauf) {

        	try {

        		int length = 0;
		
					this.datum = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datum,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datum,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.dim_zeit_id = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.dim_zeit_id = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.dim_zeit_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.dim_zeit_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dim_zeit_id="+String.valueOf(dim_zeit_id));
		sb.append(",datum="+String.valueOf(datum));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(von_zeitStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.datum, other.datum);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		von_zeitStruct von_zeit = new von_zeitStruct();




	
	/**
	 * [tAdvancedHash_von_zeit begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_von_zeit", false);
		start_Hash.put("tAdvancedHash_von_zeit", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_von_zeit";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"von_zeit");
					}
				
		int tos_count_tAdvancedHash_von_zeit = 0;
		

			   		// connection name:von_zeit
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_1) outputs:(von_zeit,von_zeit) | target node:tAdvancedHash_von_zeit - inputs:(von_zeit) outputs:()
			   		// linked node: tMap_1 - inputs:(zu_lkp_dim_tabellen,von_artikel,von_land,von_zeit) outputs:(zu_aktualisiere_mart_tabelle)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_von_zeit = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<von_zeitStruct> tHash_Lookup_von_zeit =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<von_zeitStruct>getLookup(matchingModeEnum_von_zeit);
	   						   
		   	   	   globalMap.put("tHash_Lookup_von_zeit", tHash_Lookup_von_zeit);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_von_zeit begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "\nselect\n	dim_zeit_id,\n	datum\nfrom\n	" + context.daisie_db_schema + ".ta_dim_zeit\n";
		    

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								von_zeit.dim_zeit_id = 0;
							} else {
		                          
            von_zeit.dim_zeit_id = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								von_zeit.datum = null;
							} else {
										
			von_zeit.datum = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 2);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_von_zeit main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_von_zeit";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"von_zeit"
						
						);
					}
					


			   
			   

					von_zeitStruct von_zeit_HashRow = new von_zeitStruct();
		   	   	   
				
				von_zeit_HashRow.dim_zeit_id = von_zeit.dim_zeit_id;
				
				von_zeit_HashRow.datum = von_zeit.datum;
				
			tHash_Lookup_von_zeit.put(von_zeit_HashRow);
			
            




 


	tos_count_tAdvancedHash_von_zeit++;

/**
 * [tAdvancedHash_von_zeit main ] stop
 */
	
	/**
	 * [tAdvancedHash_von_zeit process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_von_zeit";

	

 



/**
 * [tAdvancedHash_von_zeit process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_von_zeit process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_von_zeit";

	

 



/**
 * [tAdvancedHash_von_zeit process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_von_zeit end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_von_zeit";

	

tHash_Lookup_von_zeit.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"von_zeit");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_von_zeit", true);
end_Hash.put("tAdvancedHash_von_zeit", System.currentTimeMillis());




/**
 * [tAdvancedHash_von_zeit end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_von_zeit finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_von_zeit";

	

 



/**
 * [tAdvancedHash_von_zeit finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "AUS_FILE";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final j_mart_artikelverkauf j_mart_artikelverkaufClass = new j_mart_artikelverkauf();

        int exitCode = j_mart_artikelverkaufClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = j_mart_artikelverkauf.class.getClassLoader().getResourceAsStream("local_project/j_mart_artikelverkauf_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = j_mart_artikelverkauf.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("daisie_db_server", "id_String");
                        if(context.getStringValue("daisie_db_server") == null) {
                            context.daisie_db_server = null;
                        } else {
                            context.daisie_db_server=(String) context.getProperty("daisie_db_server");
                        }
                        context.setContextType("daisie_db_database", "id_String");
                        if(context.getStringValue("daisie_db_database") == null) {
                            context.daisie_db_database = null;
                        } else {
                            context.daisie_db_database=(String) context.getProperty("daisie_db_database");
                        }
                        context.setContextType("daisie_db_password", "id_Password");
                        if(context.getStringValue("daisie_db_password") == null) {
                            context.daisie_db_password = null;
                        } else {
                            String pwd_daisie_db_password_value = context.getProperty("daisie_db_password");
                            context.daisie_db_password = null;
                            if(pwd_daisie_db_password_value!=null) {
                                if(context_param.containsKey("daisie_db_password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.daisie_db_password = pwd_daisie_db_password_value;
                                } else if (!pwd_daisie_db_password_value.isEmpty()) {
                                    try {
                                        context.daisie_db_password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_daisie_db_password_value);
                                        context.put("daisie_db_password",context.daisie_db_password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("daisie_db_additionalParams", "id_String");
                        if(context.getStringValue("daisie_db_additionalParams") == null) {
                            context.daisie_db_additionalParams = null;
                        } else {
                            context.daisie_db_additionalParams=(String) context.getProperty("daisie_db_additionalParams");
                        }
                        context.setContextType("daisie_db_username", "id_String");
                        if(context.getStringValue("daisie_db_username") == null) {
                            context.daisie_db_username = null;
                        } else {
                            context.daisie_db_username=(String) context.getProperty("daisie_db_username");
                        }
                        context.setContextType("daisie_db_port", "id_String");
                        if(context.getStringValue("daisie_db_port") == null) {
                            context.daisie_db_port = null;
                        } else {
                            context.daisie_db_port=(String) context.getProperty("daisie_db_port");
                        }
                        context.setContextType("daisie_db_schema", "id_String");
                        if(context.getStringValue("daisie_db_schema") == null) {
                            context.daisie_db_schema = null;
                        } else {
                            context.daisie_db_schema=(String) context.getProperty("daisie_db_schema");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("daisie_db_server")) {
                context.daisie_db_server = (String) parentContextMap.get("daisie_db_server");
            }if (parentContextMap.containsKey("daisie_db_database")) {
                context.daisie_db_database = (String) parentContextMap.get("daisie_db_database");
            }if (parentContextMap.containsKey("daisie_db_password")) {
                context.daisie_db_password = (java.lang.String) parentContextMap.get("daisie_db_password");
            }if (parentContextMap.containsKey("daisie_db_additionalParams")) {
                context.daisie_db_additionalParams = (String) parentContextMap.get("daisie_db_additionalParams");
            }if (parentContextMap.containsKey("daisie_db_username")) {
                context.daisie_db_username = (String) parentContextMap.get("daisie_db_username");
            }if (parentContextMap.containsKey("daisie_db_port")) {
                context.daisie_db_port = (String) parentContextMap.get("daisie_db_port");
            }if (parentContextMap.containsKey("daisie_db_schema")) {
                context.daisie_db_schema = (String) parentContextMap.get("daisie_db_schema");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("daisie_db_password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : j_mart_artikelverkauf");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     149623 characters generated by Talend Open Studio for Data Integration 
 *     on the 30. März 2023 um 10:06:08 MESZ
 ************************************************************************************************/